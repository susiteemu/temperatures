//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Measurement = newMeasurementTable("public", "measurement", "")

type measurementTable struct {
	postgres.Table

	// Columns
	ID                        postgres.ColumnInteger
	DeviceID                  postgres.ColumnInteger
	CreatedAt                 postgres.ColumnTimestampz
	Temperature               postgres.ColumnFloat
	Humidity                  postgres.ColumnFloat
	Pressure                  postgres.ColumnInteger
	AccelerationX             postgres.ColumnInteger
	AccelerationY             postgres.ColumnInteger
	AccelerationZ             postgres.ColumnInteger
	BatteryVoltage            postgres.ColumnInteger
	TxPower                   postgres.ColumnInteger
	MovementCounter           postgres.ColumnInteger
	MeasurementSequenceNumber postgres.ColumnInteger
	Rssi                      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type MeasurementTable struct {
	measurementTable

	EXCLUDED measurementTable
}

// AS creates new MeasurementTable with assigned alias
func (a MeasurementTable) AS(alias string) *MeasurementTable {
	return newMeasurementTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MeasurementTable with assigned schema name
func (a MeasurementTable) FromSchema(schemaName string) *MeasurementTable {
	return newMeasurementTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MeasurementTable with assigned table prefix
func (a MeasurementTable) WithPrefix(prefix string) *MeasurementTable {
	return newMeasurementTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MeasurementTable with assigned table suffix
func (a MeasurementTable) WithSuffix(suffix string) *MeasurementTable {
	return newMeasurementTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMeasurementTable(schemaName, tableName, alias string) *MeasurementTable {
	return &MeasurementTable{
		measurementTable: newMeasurementTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newMeasurementTableImpl("", "excluded", ""),
	}
}

func newMeasurementTableImpl(schemaName, tableName, alias string) measurementTable {
	var (
		IDColumn                        = postgres.IntegerColumn("id")
		DeviceIDColumn                  = postgres.IntegerColumn("device_id")
		CreatedAtColumn                 = postgres.TimestampzColumn("created_at")
		TemperatureColumn               = postgres.FloatColumn("temperature")
		HumidityColumn                  = postgres.FloatColumn("humidity")
		PressureColumn                  = postgres.IntegerColumn("pressure")
		AccelerationXColumn             = postgres.IntegerColumn("acceleration_x")
		AccelerationYColumn             = postgres.IntegerColumn("acceleration_y")
		AccelerationZColumn             = postgres.IntegerColumn("acceleration_z")
		BatteryVoltageColumn            = postgres.IntegerColumn("battery_voltage")
		TxPowerColumn                   = postgres.IntegerColumn("tx_power")
		MovementCounterColumn           = postgres.IntegerColumn("movement_counter")
		MeasurementSequenceNumberColumn = postgres.IntegerColumn("measurement_sequence_number")
		RssiColumn                      = postgres.IntegerColumn("rssi")
		allColumns                      = postgres.ColumnList{IDColumn, DeviceIDColumn, CreatedAtColumn, TemperatureColumn, HumidityColumn, PressureColumn, AccelerationXColumn, AccelerationYColumn, AccelerationZColumn, BatteryVoltageColumn, TxPowerColumn, MovementCounterColumn, MeasurementSequenceNumberColumn, RssiColumn}
		mutableColumns                  = postgres.ColumnList{DeviceIDColumn, CreatedAtColumn, TemperatureColumn, HumidityColumn, PressureColumn, AccelerationXColumn, AccelerationYColumn, AccelerationZColumn, BatteryVoltageColumn, TxPowerColumn, MovementCounterColumn, MeasurementSequenceNumberColumn, RssiColumn}
		defaultColumns                  = postgres.ColumnList{IDColumn}
	)

	return measurementTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                        IDColumn,
		DeviceID:                  DeviceIDColumn,
		CreatedAt:                 CreatedAtColumn,
		Temperature:               TemperatureColumn,
		Humidity:                  HumidityColumn,
		Pressure:                  PressureColumn,
		AccelerationX:             AccelerationXColumn,
		AccelerationY:             AccelerationYColumn,
		AccelerationZ:             AccelerationZColumn,
		BatteryVoltage:            BatteryVoltageColumn,
		TxPower:                   TxPowerColumn,
		MovementCounter:           MovementCounterColumn,
		MeasurementSequenceNumber: MeasurementSequenceNumberColumn,
		Rssi:                      RssiColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
